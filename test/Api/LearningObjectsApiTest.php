<?php
/**
 * LearningObjectsApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LtiSaas API
 *
 * <p>A brief overview of the API versions:</p> <ul> <li><strong>v0:</strong> This version is solely for testing and does not interact with the database, nor does it involve any validation. It simply serves mock data.</li> <li><strong>v1:</strong> This is the official version of the LtiSaas API, intended for production use.</li> </ul> <p>Please be informed that when testing version v0, the HTTP <code>Access-Token</code> header should be set with the value 'dummy'.</p> <p>Also, please note that the API has a limit of 2500 results per response.</p> <p>Additionally, all webservices support both POST and GET requests. However, the POST method is required when uploading files.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace LtiSaasApi\Test\Api;

use \LtiSaasApi\Configuration;
use \LtiSaasApi\ApiException;
use \LtiSaasApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LearningObjectsApiTest Class Doc Comment
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LearningObjectsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for courseLearningObjectDelete
     *
     * Delete a specific learning object.
     *
     */
    public function testCourseLearningObjectDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for courseLearningObjectScromAdd
     *
     * Add an SCORM package to a course.
     *
     */
    public function testCourseLearningObjectScromAdd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for courseLearningobjectList
     *
     * Get learning objects for a course.
     *
     */
    public function testCourseLearningobjectList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for courseLearningobjectScormUpdate
     *
     * Update SCORM Learning Object.
     *
     */
    public function testCourseLearningobjectScormUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
