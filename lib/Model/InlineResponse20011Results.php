<?php
/**
 * InlineResponse20011Results
 *
 * PHP version 5
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LtiSaas API
 *
 * <p>A brief overview of the API versions:</p> <ul> <li><strong>v0:</strong> This version is solely for testing and does not interact with the database, nor does it involve any validation. It simply serves mock data.</li> <li><strong>v1:</strong> This is the official version of the LtiSaas API, intended for production use.</li> </ul> <p>Please be informed that when testing version v0, the HTTP <code>Access-Token</code> header should be set with the value 'dummy'.</p> <p>Also, please note that the API has a limit of 2500 results per response.</p> <p>Additionally, all webservices support both POST and GET requests. However, the POST method is required when uploading files.</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LtiSaasApi\Model;

use \ArrayAccess;
use \LtiSaasApi\ObjectSerializer;

/**
 * InlineResponse20011Results Class Doc Comment
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20011Results implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_11_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'userid' => 'int',
        'firstname' => 'string',
        'lastname' => 'string',
        'email' => 'string',
        'lastip' => 'string',
        'lti_lastgrade' => 'float',
        'lti_lastaccess' => 'int',
        'lti_timecreated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'userid' => null,
        'firstname' => null,
        'lastname' => null,
        'email' => 'email',
        'lastip' => null,
        'lti_lastgrade' => 'float',
        'lti_lastaccess' => null,
        'lti_timecreated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userid' => 'userid',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'email' => 'email',
        'lastip' => 'lastip',
        'lti_lastgrade' => 'lti_lastgrade',
        'lti_lastaccess' => 'lti_lastaccess',
        'lti_timecreated' => 'lti_timecreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userid' => 'setUserid',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'email' => 'setEmail',
        'lastip' => 'setLastip',
        'lti_lastgrade' => 'setLtiLastgrade',
        'lti_lastaccess' => 'setLtiLastaccess',
        'lti_timecreated' => 'setLtiTimecreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userid' => 'getUserid',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'email' => 'getEmail',
        'lastip' => 'getLastip',
        'lti_lastgrade' => 'getLtiLastgrade',
        'lti_lastaccess' => 'getLtiLastaccess',
        'lti_timecreated' => 'getLtiTimecreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userid'] = isset($data['userid']) ? $data['userid'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['lastip'] = isset($data['lastip']) ? $data['lastip'] : null;
        $this->container['lti_lastgrade'] = isset($data['lti_lastgrade']) ? $data['lti_lastgrade'] : null;
        $this->container['lti_lastaccess'] = isset($data['lti_lastaccess']) ? $data['lti_lastaccess'] : null;
        $this->container['lti_timecreated'] = isset($data['lti_timecreated']) ? $data['lti_timecreated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userid
     *
     * @return int
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int $userid userid
     *
     * @return $this
     */
    public function setUserid($userid)
    {
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets lastip
     *
     * @return string
     */
    public function getLastip()
    {
        return $this->container['lastip'];
    }

    /**
     * Sets lastip
     *
     * @param string $lastip lastip
     *
     * @return $this
     */
    public function setLastip($lastip)
    {
        $this->container['lastip'] = $lastip;

        return $this;
    }

    /**
     * Gets lti_lastgrade
     *
     * @return float
     */
    public function getLtiLastgrade()
    {
        return $this->container['lti_lastgrade'];
    }

    /**
     * Sets lti_lastgrade
     *
     * @param float $lti_lastgrade lti_lastgrade
     *
     * @return $this
     */
    public function setLtiLastgrade($lti_lastgrade)
    {
        $this->container['lti_lastgrade'] = $lti_lastgrade;

        return $this;
    }

    /**
     * Gets lti_lastaccess
     *
     * @return int
     */
    public function getLtiLastaccess()
    {
        return $this->container['lti_lastaccess'];
    }

    /**
     * Sets lti_lastaccess
     *
     * @param int $lti_lastaccess lti_lastaccess
     *
     * @return $this
     */
    public function setLtiLastaccess($lti_lastaccess)
    {
        $this->container['lti_lastaccess'] = $lti_lastaccess;

        return $this;
    }

    /**
     * Gets lti_timecreated
     *
     * @return int
     */
    public function getLtiTimecreated()
    {
        return $this->container['lti_timecreated'];
    }

    /**
     * Sets lti_timecreated
     *
     * @param int $lti_timecreated lti_timecreated
     *
     * @return $this
     */
    public function setLtiTimecreated($lti_timecreated)
    {
        $this->container['lti_timecreated'] = $lti_timecreated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
