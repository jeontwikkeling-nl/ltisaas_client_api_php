<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LtiSaas API
 *
 * <p>A brief overview of the API versions:</p> <ul> <li><strong>v0:</strong> This version is solely for testing and does not interact with the database, nor does it involve any validation. It simply serves mock data.</li> <li><strong>v1:</strong> This is the official version of the LtiSaas API, intended for production use.</li> </ul> <p>Please be informed that when testing version v0, the HTTP <code>Access-Token</code> header should be set with the value 'dummy'.</p> <p>Also, please note that the API has a limit of 2500 results per response.</p> <p>Additionally, all webservices support both POST and GET requests. However, the POST method is required when uploading files.</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LtiSaasApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LtiSaasApi\ApiException;
use LtiSaasApi\Configuration;
use LtiSaasApi\HeaderSelector;
use LtiSaasApi\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation courseAdd
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2001
     */
    public function courseAdd($coursename)
    {
        list($response) = $this->courseAddWithHttpInfo($coursename);
        return $response;
    }

    /**
     * Operation courseAddWithHttpInfo
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseAddWithHttpInfo($coursename)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2001';
        $request = $this->courseAddRequest($coursename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseAddAsync
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseAddAsync($coursename)
    {
        return $this->courseAddAsyncWithHttpInfo($coursename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseAddAsyncWithHttpInfo
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseAddAsyncWithHttpInfo($coursename)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2001';
        $request = $this->courseAddRequest($coursename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseAdd'
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseAddRequest($coursename)
    {
        // verify the required parameter 'coursename' is set
        if ($coursename === null || (is_array($coursename) && count($coursename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coursename when calling courseAdd'
            );
        }

        $resourcePath = '/course/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($coursename !== null) {
            $queryParams['coursename'] = ObjectSerializer::toQueryValue($coursename, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseDelete
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2003
     */
    public function courseDelete($courseid)
    {
        list($response) = $this->courseDeleteWithHttpInfo($courseid);
        return $response;
    }

    /**
     * Operation courseDeleteWithHttpInfo
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseDeleteWithHttpInfo($courseid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2003';
        $request = $this->courseDeleteRequest($courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseDeleteAsync
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseDeleteAsync($courseid)
    {
        return $this->courseDeleteAsyncWithHttpInfo($courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseDeleteAsyncWithHttpInfo
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseDeleteAsyncWithHttpInfo($courseid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2003';
        $request = $this->courseDeleteRequest($courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseDelete'
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseDeleteRequest($courseid)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseDelete'
            );
        }

        $resourcePath = '/course/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningObjectDelete
     *
     * Delete a specific learning object
     *
     * @param  int $learningobjectid The identifier of the learning object (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2006
     */
    public function courseLearningObjectDelete($learningobjectid)
    {
        list($response) = $this->courseLearningObjectDeleteWithHttpInfo($learningobjectid);
        return $response;
    }

    /**
     * Operation courseLearningObjectDeleteWithHttpInfo
     *
     * Delete a specific learning object
     *
     * @param  int $learningobjectid The identifier of the learning object (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningObjectDeleteWithHttpInfo($learningobjectid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->courseLearningObjectDeleteRequest($learningobjectid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningObjectDeleteAsync
     *
     * Delete a specific learning object
     *
     * @param  int $learningobjectid The identifier of the learning object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectDeleteAsync($learningobjectid)
    {
        return $this->courseLearningObjectDeleteAsyncWithHttpInfo($learningobjectid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningObjectDeleteAsyncWithHttpInfo
     *
     * Delete a specific learning object
     *
     * @param  int $learningobjectid The identifier of the learning object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectDeleteAsyncWithHttpInfo($learningobjectid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->courseLearningObjectDeleteRequest($learningobjectid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningObjectDelete'
     *
     * @param  int $learningobjectid The identifier of the learning object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningObjectDeleteRequest($learningobjectid)
    {
        // verify the required parameter 'learningobjectid' is set
        if ($learningobjectid === null || (is_array($learningobjectid) && count($learningobjectid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $learningobjectid when calling courseLearningObjectDelete'
            );
        }

        $resourcePath = '/course/learningobject/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($learningobjectid !== null) {
            $queryParams['learningobjectid'] = ObjectSerializer::toQueryValue($learningobjectid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningObjectScromAdd
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid courseid (optional)
     * @param  \SplFileObject $packagefile packagefile (optional)
     * @param  string $name name (optional)
     * @param  int $popup popup (optional)
     * @param  int $width width (optional)
     * @param  int $height height (optional)
     * @param  int $grademethod grademethod (optional)
     * @param  int $maxgrade maxgrade (optional)
     * @param  int $maxattempt maxattempt (optional)
     * @param  int $whatgrade whatgrade (optional)
     * @param  int $forcenewattempt forcenewattempt (optional)
     * @param  int $lastattemptlock lastattemptlock (optional)
     * @param  int $autocommit autocommit (optional)
     * @param  int $masteryoverride masteryoverride (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2005
     */
    public function courseLearningObjectScromAdd($courseid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        list($response) = $this->courseLearningObjectScromAddWithHttpInfo($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);
        return $response;
    }

    /**
     * Operation courseLearningObjectScromAddWithHttpInfo
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningObjectScromAddWithHttpInfo($courseid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2005';
        $request = $this->courseLearningObjectScromAddRequest($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningObjectScromAddAsync
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectScromAddAsync($courseid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        return $this->courseLearningObjectScromAddAsyncWithHttpInfo($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningObjectScromAddAsyncWithHttpInfo
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectScromAddAsyncWithHttpInfo($courseid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2005';
        $request = $this->courseLearningObjectScromAddRequest($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningObjectScromAdd'
     *
     * @param  int $courseid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningObjectScromAddRequest($courseid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {

        $resourcePath = '/course/learningobject/scrom/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($courseid !== null) {
            $formParams['courseid'] = ObjectSerializer::toFormValue($courseid);
        }
        // form params
        if ($packagefile !== null) {
            $formParams['packagefile'] = ObjectSerializer::toFormValue($packagefile);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($popup !== null) {
            $formParams['popup'] = ObjectSerializer::toFormValue($popup);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($grademethod !== null) {
            $formParams['grademethod'] = ObjectSerializer::toFormValue($grademethod);
        }
        // form params
        if ($maxgrade !== null) {
            $formParams['maxgrade'] = ObjectSerializer::toFormValue($maxgrade);
        }
        // form params
        if ($maxattempt !== null) {
            $formParams['maxattempt'] = ObjectSerializer::toFormValue($maxattempt);
        }
        // form params
        if ($whatgrade !== null) {
            $formParams['whatgrade'] = ObjectSerializer::toFormValue($whatgrade);
        }
        // form params
        if ($forcenewattempt !== null) {
            $formParams['forcenewattempt'] = ObjectSerializer::toFormValue($forcenewattempt);
        }
        // form params
        if ($lastattemptlock !== null) {
            $formParams['lastattemptlock'] = ObjectSerializer::toFormValue($lastattemptlock);
        }
        // form params
        if ($autocommit !== null) {
            $formParams['autocommit'] = ObjectSerializer::toFormValue($autocommit);
        }
        // form params
        if ($masteryoverride !== null) {
            $formParams['masteryoverride'] = ObjectSerializer::toFormValue($masteryoverride);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningobjectList
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2004
     */
    public function courseLearningobjectList($courseid)
    {
        list($response) = $this->courseLearningobjectListWithHttpInfo($courseid);
        return $response;
    }

    /**
     * Operation courseLearningobjectListWithHttpInfo
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningobjectListWithHttpInfo($courseid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2004';
        $request = $this->courseLearningobjectListRequest($courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningobjectListAsync
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectListAsync($courseid)
    {
        return $this->courseLearningobjectListAsyncWithHttpInfo($courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningobjectListAsyncWithHttpInfo
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectListAsyncWithHttpInfo($courseid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2004';
        $request = $this->courseLearningobjectListRequest($courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningobjectList'
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningobjectListRequest($courseid)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseLearningobjectList'
            );
        }

        $resourcePath = '/course/learningobject/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningobjectScormUpdate
     *
     * Update SCORM Learning Object
     *
     * @param  int $learningobjectid learningobjectid (optional)
     * @param  \SplFileObject $packagefile packagefile (optional)
     * @param  string $name name (optional)
     * @param  int $popup popup (optional)
     * @param  int $width width (optional)
     * @param  int $height height (optional)
     * @param  int $grademethod grademethod (optional)
     * @param  int $maxgrade maxgrade (optional)
     * @param  int $maxattempt maxattempt (optional)
     * @param  int $whatgrade whatgrade (optional)
     * @param  int $forcenewattempt forcenewattempt (optional)
     * @param  int $lastattemptlock lastattemptlock (optional)
     * @param  int $autocommit autocommit (optional)
     * @param  int $masteryoverride masteryoverride (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2006
     */
    public function courseLearningobjectScormUpdate($learningobjectid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        list($response) = $this->courseLearningobjectScormUpdateWithHttpInfo($learningobjectid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);
        return $response;
    }

    /**
     * Operation courseLearningobjectScormUpdateWithHttpInfo
     *
     * Update SCORM Learning Object
     *
     * @param  int $learningobjectid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningobjectScormUpdateWithHttpInfo($learningobjectid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->courseLearningobjectScormUpdateRequest($learningobjectid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningobjectScormUpdateAsync
     *
     * Update SCORM Learning Object
     *
     * @param  int $learningobjectid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectScormUpdateAsync($learningobjectid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        return $this->courseLearningobjectScormUpdateAsyncWithHttpInfo($learningobjectid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningobjectScormUpdateAsyncWithHttpInfo
     *
     * Update SCORM Learning Object
     *
     * @param  int $learningobjectid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectScormUpdateAsyncWithHttpInfo($learningobjectid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->courseLearningobjectScormUpdateRequest($learningobjectid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningobjectScormUpdate'
     *
     * @param  int $learningobjectid (optional)
     * @param  \SplFileObject $packagefile (optional)
     * @param  string $name (optional)
     * @param  int $popup (optional)
     * @param  int $width (optional)
     * @param  int $height (optional)
     * @param  int $grademethod (optional)
     * @param  int $maxgrade (optional)
     * @param  int $maxattempt (optional)
     * @param  int $whatgrade (optional)
     * @param  int $forcenewattempt (optional)
     * @param  int $lastattemptlock (optional)
     * @param  int $autocommit (optional)
     * @param  int $masteryoverride (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningobjectScormUpdateRequest($learningobjectid = null, $packagefile = null, $name = null, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {

        $resourcePath = '/course/learningobject/scrom/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($learningobjectid !== null) {
            $formParams['learningobjectid'] = ObjectSerializer::toFormValue($learningobjectid);
        }
        // form params
        if ($packagefile !== null) {
            $formParams['packagefile'] = ObjectSerializer::toFormValue($packagefile);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($popup !== null) {
            $formParams['popup'] = ObjectSerializer::toFormValue($popup);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($grademethod !== null) {
            $formParams['grademethod'] = ObjectSerializer::toFormValue($grademethod);
        }
        // form params
        if ($maxgrade !== null) {
            $formParams['maxgrade'] = ObjectSerializer::toFormValue($maxgrade);
        }
        // form params
        if ($maxattempt !== null) {
            $formParams['maxattempt'] = ObjectSerializer::toFormValue($maxattempt);
        }
        // form params
        if ($whatgrade !== null) {
            $formParams['whatgrade'] = ObjectSerializer::toFormValue($whatgrade);
        }
        // form params
        if ($forcenewattempt !== null) {
            $formParams['forcenewattempt'] = ObjectSerializer::toFormValue($forcenewattempt);
        }
        // form params
        if ($lastattemptlock !== null) {
            $formParams['lastattemptlock'] = ObjectSerializer::toFormValue($lastattemptlock);
        }
        // form params
        if ($autocommit !== null) {
            $formParams['autocommit'] = ObjectSerializer::toFormValue($autocommit);
        }
        // form params
        if ($masteryoverride !== null) {
            $formParams['masteryoverride'] = ObjectSerializer::toFormValue($masteryoverride);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseList
     *
     * Retrieve all courses
     *
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse200
     */
    public function courseList()
    {
        list($response) = $this->courseListWithHttpInfo();
        return $response;
    }

    /**
     * Operation courseListWithHttpInfo
     *
     * Retrieve all courses
     *
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseListWithHttpInfo()
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse200';
        $request = $this->courseListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseListAsync
     *
     * Retrieve all courses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseListAsync()
    {
        return $this->courseListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseListAsyncWithHttpInfo
     *
     * Retrieve all courses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseListAsyncWithHttpInfo()
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse200';
        $request = $this->courseListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseListRequest()
    {

        $resourcePath = '/course/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLtiRegistrationsByDay
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2007
     */
    public function courseLtiRegistrationsByDay($from, $till, $toolid = null)
    {
        list($response) = $this->courseLtiRegistrationsByDayWithHttpInfo($from, $till, $toolid);
        return $response;
    }

    /**
     * Operation courseLtiRegistrationsByDayWithHttpInfo
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLtiRegistrationsByDayWithHttpInfo($from, $till, $toolid = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2007';
        $request = $this->courseLtiRegistrationsByDayRequest($from, $till, $toolid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLtiRegistrationsByDayAsync
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsByDayAsync($from, $till, $toolid = null)
    {
        return $this->courseLtiRegistrationsByDayAsyncWithHttpInfo($from, $till, $toolid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLtiRegistrationsByDayAsyncWithHttpInfo
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsByDayAsyncWithHttpInfo($from, $till, $toolid = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2007';
        $request = $this->courseLtiRegistrationsByDayRequest($from, $till, $toolid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLtiRegistrationsByDay'
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLtiRegistrationsByDayRequest($from, $till, $toolid = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling courseLtiRegistrationsByDay'
            );
        }
        // verify the required parameter 'till' is set
        if ($till === null || (is_array($till) && count($till) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $till when calling courseLtiRegistrationsByDay'
            );
        }

        $resourcePath = '/course/lti/registrations_by_day';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, 'date');
        }
        // query params
        if ($till !== null) {
            $queryParams['till'] = ObjectSerializer::toQueryValue($till, 'date');
        }
        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLtiRegistrationsSumByCourse
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2008
     */
    public function courseLtiRegistrationsSumByCourse($from, $till, $courseid = null)
    {
        list($response) = $this->courseLtiRegistrationsSumByCourseWithHttpInfo($from, $till, $courseid);
        return $response;
    }

    /**
     * Operation courseLtiRegistrationsSumByCourseWithHttpInfo
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLtiRegistrationsSumByCourseWithHttpInfo($from, $till, $courseid = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2008';
        $request = $this->courseLtiRegistrationsSumByCourseRequest($from, $till, $courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLtiRegistrationsSumByCourseAsync
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsSumByCourseAsync($from, $till, $courseid = null)
    {
        return $this->courseLtiRegistrationsSumByCourseAsyncWithHttpInfo($from, $till, $courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLtiRegistrationsSumByCourseAsyncWithHttpInfo
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsSumByCourseAsyncWithHttpInfo($from, $till, $courseid = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2008';
        $request = $this->courseLtiRegistrationsSumByCourseRequest($from, $till, $courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLtiRegistrationsSumByCourse'
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLtiRegistrationsSumByCourseRequest($from, $till, $courseid = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling courseLtiRegistrationsSumByCourse'
            );
        }
        // verify the required parameter 'till' is set
        if ($till === null || (is_array($till) && count($till) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $till when calling courseLtiRegistrationsSumByCourse'
            );
        }

        $resourcePath = '/course/lti/registrations_sum_by_course';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, 'date');
        }
        // query params
        if ($till !== null) {
            $queryParams['till'] = ObjectSerializer::toQueryValue($till, 'date');
        }
        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolAdd
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (course or activity) (required)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse20010
     */
    public function courseToolAdd($courseid, $ltiversion, $name, $publishmode, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        list($response) = $this->courseToolAddWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);
        return $response;
    }

    /**
     * Operation courseToolAddWithHttpInfo
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (course or activity) (required)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolAddWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20010';
        $request = $this->courseToolAddRequest($courseid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolAddAsync
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (course or activity) (required)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolAddAsync($courseid, $ltiversion, $name, $publishmode, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        return $this->courseToolAddAsyncWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolAddAsyncWithHttpInfo
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (course or activity) (required)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolAddAsyncWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20010';
        $request = $this->courseToolAddRequest($courseid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolAdd'
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (course or activity) (required)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolAddRequest($courseid, $ltiversion, $name, $publishmode, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseToolAdd'
            );
        }
        // verify the required parameter 'ltiversion' is set
        if ($ltiversion === null || (is_array($ltiversion) && count($ltiversion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ltiversion when calling courseToolAdd'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling courseToolAdd'
            );
        }
        // verify the required parameter 'publishmode' is set
        if ($publishmode === null || (is_array($publishmode) && count($publishmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publishmode when calling courseToolAdd'
            );
        }

        $resourcePath = '/course/tool/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }
        // query params
        if ($ltiversion !== null) {
            $queryParams['ltiversion'] = ObjectSerializer::toQueryValue($ltiversion, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($publishmode !== null) {
            $queryParams['publishmode'] = ObjectSerializer::toQueryValue($publishmode, null);
        }
        // query params
        if ($learningobjectid !== null) {
            $queryParams['learningobjectid'] = ObjectSerializer::toQueryValue($learningobjectid, null);
        }
        // query params
        if ($maxenrolled !== null) {
            $queryParams['maxenrolled'] = ObjectSerializer::toQueryValue($maxenrolled, null);
        }
        // query params
        if ($roleinstructor !== null) {
            $queryParams['roleinstructor'] = ObjectSerializer::toQueryValue($roleinstructor, null);
        }
        // query params
        if ($rolelearner !== null) {
            $queryParams['rolelearner'] = ObjectSerializer::toQueryValue($rolelearner, null);
        }
        // query params
        if ($provisioningmodeinstructor !== null) {
            $queryParams['provisioningmodeinstructor'] = ObjectSerializer::toQueryValue($provisioningmodeinstructor, null);
        }
        // query params
        if ($provisioningmodelearner !== null) {
            $queryParams['provisioningmodelearner'] = ObjectSerializer::toQueryValue($provisioningmodelearner, null);
        }
        // query params
        if ($gradesync !== null) {
            $queryParams['gradesync'] = ObjectSerializer::toQueryValue($gradesync, null);
        }
        // query params
        if ($gradesynccompletion !== null) {
            $queryParams['gradesynccompletion'] = ObjectSerializer::toQueryValue($gradesynccompletion, null);
        }
        // query params
        if ($membersync !== null) {
            $queryParams['membersync'] = ObjectSerializer::toQueryValue($membersync, null);
        }
        // query params
        if ($membersyncmode !== null) {
            $queryParams['membersyncmode'] = ObjectSerializer::toQueryValue($membersyncmode, null);
        }
        // query params
        if ($enrolperiod !== null) {
            $queryParams['enrolperiod'] = ObjectSerializer::toQueryValue($enrolperiod, null);
        }
        // query params
        if ($enrolstartdate !== null) {
            $queryParams['enrolstartdate'] = ObjectSerializer::toQueryValue($enrolstartdate, 'date-time');
        }
        // query params
        if ($enrolenddate !== null) {
            $queryParams['enrolenddate'] = ObjectSerializer::toQueryValue($enrolenddate, 'date-time');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolDelete
     *
     * Delete a specific course tool
     *
     * @param  int $toolid The identifier of the lti tool (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2006
     */
    public function courseToolDelete($toolid)
    {
        list($response) = $this->courseToolDeleteWithHttpInfo($toolid);
        return $response;
    }

    /**
     * Operation courseToolDeleteWithHttpInfo
     *
     * Delete a specific course tool
     *
     * @param  int $toolid The identifier of the lti tool (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolDeleteWithHttpInfo($toolid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->courseToolDeleteRequest($toolid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolDeleteAsync
     *
     * Delete a specific course tool
     *
     * @param  int $toolid The identifier of the lti tool (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolDeleteAsync($toolid)
    {
        return $this->courseToolDeleteAsyncWithHttpInfo($toolid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolDeleteAsyncWithHttpInfo
     *
     * Delete a specific course tool
     *
     * @param  int $toolid The identifier of the lti tool (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolDeleteAsyncWithHttpInfo($toolid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->courseToolDeleteRequest($toolid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolDelete'
     *
     * @param  int $toolid The identifier of the lti tool (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolDeleteRequest($toolid)
    {
        // verify the required parameter 'toolid' is set
        if ($toolid === null || (is_array($toolid) && count($toolid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toolid when calling courseToolDelete'
            );
        }

        $resourcePath = '/course/tool/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolList
     *
     * List all LTI tools within a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltitype The version of LTI (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2009
     */
    public function courseToolList($courseid, $ltitype = null)
    {
        list($response) = $this->courseToolListWithHttpInfo($courseid, $ltitype);
        return $response;
    }

    /**
     * Operation courseToolListWithHttpInfo
     *
     * List all LTI tools within a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltitype The version of LTI (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolListWithHttpInfo($courseid, $ltitype = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2009';
        $request = $this->courseToolListRequest($courseid, $ltitype);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolListAsync
     *
     * List all LTI tools within a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltitype The version of LTI (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolListAsync($courseid, $ltitype = null)
    {
        return $this->courseToolListAsyncWithHttpInfo($courseid, $ltitype)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolListAsyncWithHttpInfo
     *
     * List all LTI tools within a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltitype The version of LTI (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolListAsyncWithHttpInfo($courseid, $ltitype = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2009';
        $request = $this->courseToolListRequest($courseid, $ltitype);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolList'
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltitype The version of LTI (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolListRequest($courseid, $ltitype = null)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseToolList'
            );
        }

        $resourcePath = '/course/tool/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }
        // query params
        if ($ltitype !== null) {
            $queryParams['ltitype'] = ObjectSerializer::toQueryValue($ltitype, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolUpdate
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (optional)
     * @param  string $name The name (optional)
     * @param  string $publishmode The mode of publishing (course or activity) (optional)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse20010
     */
    public function courseToolUpdate($toolid, $ltiversion = null, $name = null, $publishmode = null, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        list($response) = $this->courseToolUpdateWithHttpInfo($toolid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);
        return $response;
    }

    /**
     * Operation courseToolUpdateWithHttpInfo
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (optional)
     * @param  string $name The name (optional)
     * @param  string $publishmode The mode of publishing (course or activity) (optional)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolUpdateWithHttpInfo($toolid, $ltiversion = null, $name = null, $publishmode = null, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20010';
        $request = $this->courseToolUpdateRequest($toolid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolUpdateAsync
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (optional)
     * @param  string $name The name (optional)
     * @param  string $publishmode The mode of publishing (course or activity) (optional)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolUpdateAsync($toolid, $ltiversion = null, $name = null, $publishmode = null, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        return $this->courseToolUpdateAsyncWithHttpInfo($toolid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolUpdateAsyncWithHttpInfo
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (optional)
     * @param  string $name The name (optional)
     * @param  string $publishmode The mode of publishing (course or activity) (optional)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolUpdateAsyncWithHttpInfo($toolid, $ltiversion = null, $name = null, $publishmode = null, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20010';
        $request = $this->courseToolUpdateRequest($toolid, $ltiversion, $name, $publishmode, $learningobjectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolUpdate'
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (optional)
     * @param  string $name The name (optional)
     * @param  string $publishmode The mode of publishing (course or activity) (optional)
     * @param  int $learningobjectid The ID of the learning object. Only required if publishmode is set to activity (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled. Grade synchronization (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $gradesynccompletion Require course or activity completion prior to grade synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersync Whether member sync is enabled. User synchronisation (1&#x3D;Yes, 0&#x3D;No) (optional)
     * @param  int $membersyncmode User synchronisation mode (1&#x3D;Enrol new and unenrol missing users, 2&#x3D;Enrol new users, 3&#x3D;Unenrol missing users) (optional)
     * @param  int $enrolperiod The duration of the enrolment (in seconds) (optional)
     * @param  \DateTime $enrolstartdate The enrolment start date (YYYY-MM-DDTHH:mm) (optional)
     * @param  \DateTime $enrolenddate The enrolment end date (YYYY-MM-DDTHH:mm) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolUpdateRequest($toolid, $ltiversion = null, $name = null, $publishmode = null, $learningobjectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        // verify the required parameter 'toolid' is set
        if ($toolid === null || (is_array($toolid) && count($toolid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toolid when calling courseToolUpdate'
            );
        }

        $resourcePath = '/course/tool/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }
        // query params
        if ($ltiversion !== null) {
            $queryParams['ltiversion'] = ObjectSerializer::toQueryValue($ltiversion, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($publishmode !== null) {
            $queryParams['publishmode'] = ObjectSerializer::toQueryValue($publishmode, null);
        }
        // query params
        if ($learningobjectid !== null) {
            $queryParams['learningobjectid'] = ObjectSerializer::toQueryValue($learningobjectid, null);
        }
        // query params
        if ($maxenrolled !== null) {
            $queryParams['maxenrolled'] = ObjectSerializer::toQueryValue($maxenrolled, null);
        }
        // query params
        if ($roleinstructor !== null) {
            $queryParams['roleinstructor'] = ObjectSerializer::toQueryValue($roleinstructor, null);
        }
        // query params
        if ($rolelearner !== null) {
            $queryParams['rolelearner'] = ObjectSerializer::toQueryValue($rolelearner, null);
        }
        // query params
        if ($provisioningmodeinstructor !== null) {
            $queryParams['provisioningmodeinstructor'] = ObjectSerializer::toQueryValue($provisioningmodeinstructor, null);
        }
        // query params
        if ($provisioningmodelearner !== null) {
            $queryParams['provisioningmodelearner'] = ObjectSerializer::toQueryValue($provisioningmodelearner, null);
        }
        // query params
        if ($gradesync !== null) {
            $queryParams['gradesync'] = ObjectSerializer::toQueryValue($gradesync, null);
        }
        // query params
        if ($gradesynccompletion !== null) {
            $queryParams['gradesynccompletion'] = ObjectSerializer::toQueryValue($gradesynccompletion, null);
        }
        // query params
        if ($membersync !== null) {
            $queryParams['membersync'] = ObjectSerializer::toQueryValue($membersync, null);
        }
        // query params
        if ($membersyncmode !== null) {
            $queryParams['membersyncmode'] = ObjectSerializer::toQueryValue($membersyncmode, null);
        }
        // query params
        if ($enrolperiod !== null) {
            $queryParams['enrolperiod'] = ObjectSerializer::toQueryValue($enrolperiod, null);
        }
        // query params
        if ($enrolstartdate !== null) {
            $queryParams['enrolstartdate'] = ObjectSerializer::toQueryValue($enrolstartdate, 'date-time');
        }
        // query params
        if ($enrolenddate !== null) {
            $queryParams['enrolenddate'] = ObjectSerializer::toQueryValue($enrolenddate, 'date-time');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseUpdate
     *
     * Update an existing course
     *
     * @param  string $coursename The name of the course to be created (required)
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2002
     */
    public function courseUpdate($coursename, $courseid)
    {
        list($response) = $this->courseUpdateWithHttpInfo($coursename, $courseid);
        return $response;
    }

    /**
     * Operation courseUpdateWithHttpInfo
     *
     * Update an existing course
     *
     * @param  string $coursename The name of the course to be created (required)
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseUpdateWithHttpInfo($coursename, $courseid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2002';
        $request = $this->courseUpdateRequest($coursename, $courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseUpdateAsync
     *
     * Update an existing course
     *
     * @param  string $coursename The name of the course to be created (required)
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseUpdateAsync($coursename, $courseid)
    {
        return $this->courseUpdateAsyncWithHttpInfo($coursename, $courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseUpdateAsyncWithHttpInfo
     *
     * Update an existing course
     *
     * @param  string $coursename The name of the course to be created (required)
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseUpdateAsyncWithHttpInfo($coursename, $courseid)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2002';
        $request = $this->courseUpdateRequest($coursename, $courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseUpdate'
     *
     * @param  string $coursename The name of the course to be created (required)
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseUpdateRequest($coursename, $courseid)
    {
        // verify the required parameter 'coursename' is set
        if ($coursename === null || (is_array($coursename) && count($coursename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coursename when calling courseUpdate'
            );
        }
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseUpdate'
            );
        }

        $resourcePath = '/course/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($coursename !== null) {
            $queryParams['coursename'] = ObjectSerializer::toQueryValue($coursename, null);
        }
        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenAdd
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse20013
     */
    public function tokenAdd($name)
    {
        list($response) = $this->tokenAddWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation tokenAddWithHttpInfo
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenAddWithHttpInfo($name)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20013';
        $request = $this->tokenAddRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenAddAsync
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenAddAsync($name)
    {
        return $this->tokenAddAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenAddAsyncWithHttpInfo
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenAddAsyncWithHttpInfo($name)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20013';
        $request = $this->tokenAddRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenAdd'
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenAddRequest($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling tokenAdd'
            );
        }

        $resourcePath = '/token/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenDelete
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2006
     */
    public function tokenDelete($token)
    {
        list($response) = $this->tokenDeleteWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation tokenDeleteWithHttpInfo
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenDeleteWithHttpInfo($token)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->tokenDeleteRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenDeleteAsync
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenDeleteAsync($token)
    {
        return $this->tokenDeleteAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenDeleteAsyncWithHttpInfo
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenDeleteAsyncWithHttpInfo($token)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->tokenDeleteRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenDelete'
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenDeleteRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling tokenDelete'
            );
        }

        $resourcePath = '/token/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenList
     *
     * Get list of API tokens
     *
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse20012
     */
    public function tokenList()
    {
        list($response) = $this->tokenListWithHttpInfo();
        return $response;
    }

    /**
     * Operation tokenListWithHttpInfo
     *
     * Get list of API tokens
     *
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenListWithHttpInfo()
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20012';
        $request = $this->tokenListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenListAsync
     *
     * Get list of API tokens
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenListAsync()
    {
        return $this->tokenListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenListAsyncWithHttpInfo
     *
     * Get list of API tokens
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenListAsyncWithHttpInfo()
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20012';
        $request = $this->tokenListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenListRequest()
    {

        $resourcePath = '/token/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDelete
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2006
     */
    public function userDelete($id)
    {
        list($response) = $this->userDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userDeleteWithHttpInfo
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeleteWithHttpInfo($id)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->userDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDeleteAsync
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteAsync($id)
    {
        return $this->userDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeleteAsyncWithHttpInfo
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->userDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDelete'
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userDelete'
            );
        }

        $resourcePath = '/user/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDeleteBulk
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse2006
     */
    public function userDeleteBulk($ids)
    {
        list($response) = $this->userDeleteBulkWithHttpInfo($ids);
        return $response;
    }

    /**
     * Operation userDeleteBulkWithHttpInfo
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeleteBulkWithHttpInfo($ids)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->userDeleteBulkRequest($ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDeleteBulkAsync
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteBulkAsync($ids)
    {
        return $this->userDeleteBulkAsyncWithHttpInfo($ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeleteBulkAsyncWithHttpInfo
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteBulkAsyncWithHttpInfo($ids)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse2006';
        $request = $this->userDeleteBulkRequest($ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDeleteBulk'
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDeleteBulkRequest($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling userDeleteBulk'
            );
        }

        $resourcePath = '/user/delete_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'csv', true);
        }
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userList
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LtiSaasApi\Model\InlineResponse20011
     */
    public function userList($toolid = null)
    {
        list($response) = $this->userListWithHttpInfo($toolid);
        return $response;
    }

    /**
     * Operation userListWithHttpInfo
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \LtiSaasApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LtiSaasApi\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function userListWithHttpInfo($toolid = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20011';
        $request = $this->userListRequest($toolid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LtiSaasApi\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userListAsync
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userListAsync($toolid = null)
    {
        return $this->userListAsyncWithHttpInfo($toolid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userListAsyncWithHttpInfo
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userListAsyncWithHttpInfo($toolid = null)
    {
        $returnType = '\LtiSaasApi\Model\InlineResponse20011';
        $request = $this->userListRequest($toolid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userList'
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userListRequest($toolid = null)
    {

        $resourcePath = '/user/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
