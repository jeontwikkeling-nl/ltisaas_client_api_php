<?php
/**
 * InlineResponse200Results
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LtiSaas API
 *
 * API versions description:  *     - v0: For testing purposes only. It serves mock data that won't be written to the database and there is no validation.  *     - v1: The official version of the LtiSaas API.  *     Note: For testing v0, use the HTTP `Access-Token` header with the value 'dummy'
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200Results Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200Results implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totalregistrations' => 'int',
        'totalltitools' => 'int',
        'courseid' => 'int',
        'toolids' => 'int[]',
        'coursename' => 'string',
        'lastaccess' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totalregistrations' => null,
        'totalltitools' => null,
        'courseid' => null,
        'toolids' => null,
        'coursename' => null,
        'lastaccess' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totalregistrations' => 'totalregistrations',
        'totalltitools' => 'totalltitools',
        'courseid' => 'courseid',
        'toolids' => 'toolids',
        'coursename' => 'coursename',
        'lastaccess' => 'lastaccess'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'totalregistrations' => 'setTotalregistrations',
        'totalltitools' => 'setTotalltitools',
        'courseid' => 'setCourseid',
        'toolids' => 'setToolids',
        'coursename' => 'setCoursename',
        'lastaccess' => 'setLastaccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'totalregistrations' => 'getTotalregistrations',
        'totalltitools' => 'getTotalltitools',
        'courseid' => 'getCourseid',
        'toolids' => 'getToolids',
        'coursename' => 'getCoursename',
        'lastaccess' => 'getLastaccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalregistrations'] = isset($data['totalregistrations']) ? $data['totalregistrations'] : null;
        $this->container['totalltitools'] = isset($data['totalltitools']) ? $data['totalltitools'] : null;
        $this->container['courseid'] = isset($data['courseid']) ? $data['courseid'] : null;
        $this->container['toolids'] = isset($data['toolids']) ? $data['toolids'] : null;
        $this->container['coursename'] = isset($data['coursename']) ? $data['coursename'] : null;
        $this->container['lastaccess'] = isset($data['lastaccess']) ? $data['lastaccess'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets totalregistrations
     *
     * @return int
     */
    public function getTotalregistrations()
    {
        return $this->container['totalregistrations'];
    }

    /**
     * Sets totalregistrations
     *
     * @param int $totalregistrations Total number of course registrations
     *
     * @return $this
     */
    public function setTotalregistrations($totalregistrations)
    {
        $this->container['totalregistrations'] = $totalregistrations;

        return $this;
    }

    /**
     * Gets totalltitools
     *
     * @return int
     */
    public function getTotalltitools()
    {
        return $this->container['totalltitools'];
    }

    /**
     * Sets totalltitools
     *
     * @param int $totalltitools Total number of LTI tools in the course
     *
     * @return $this
     */
    public function setTotalltitools($totalltitools)
    {
        $this->container['totalltitools'] = $totalltitools;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int $courseid Course identifier
     *
     * @return $this
     */
    public function setCourseid($courseid)
    {
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets toolids
     *
     * @return int[]
     */
    public function getToolids()
    {
        return $this->container['toolids'];
    }

    /**
     * Sets toolids
     *
     * @param int[] $toolids Array of LTI tool identifiers in the course
     *
     * @return $this
     */
    public function setToolids($toolids)
    {
        $this->container['toolids'] = $toolids;

        return $this;
    }

    /**
     * Gets coursename
     *
     * @return string
     */
    public function getCoursename()
    {
        return $this->container['coursename'];
    }

    /**
     * Sets coursename
     *
     * @param string $coursename Course name
     *
     * @return $this
     */
    public function setCoursename($coursename)
    {
        $this->container['coursename'] = $coursename;

        return $this;
    }

    /**
     * Gets lastaccess
     *
     * @return int
     */
    public function getLastaccess()
    {
        return $this->container['lastaccess'];
    }

    /**
     * Sets lastaccess
     *
     * @param int $lastaccess Timestamp of last course access
     *
     * @return $this
     */
    public function setLastaccess($lastaccess)
    {
        $this->container['lastaccess'] = $lastaccess;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
