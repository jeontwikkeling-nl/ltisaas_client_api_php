<?php
/**
 * CourseToolList200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LtiSaas API
 *
 * <p>A brief overview of the API versions:</p> <ul> <li><strong>v0:</strong> This version is solely for testing and does not interact with the database, nor does it involve any validation. It simply serves mock data.</li> <li><strong>v1:</strong> This is the official version of the LtiSaas API, intended for production use.</li> </ul> <p>Please be informed that when testing version v0, the HTTP <code>Access-Token</code> header should be set with the value 'dummy'.</p> <p>Also, please note that the API has a limit of 2500 results per response.</p> <p>Additionally, all webservices support both POST and GET requests. However, the POST method is required when uploading files.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LtiSaasApi\Model;

use \ArrayAccess;
use \LtiSaasApi\ObjectSerializer;

/**
 * CourseToolList200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @package  LtiSaasApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CourseToolList200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'courseToolList_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'toolid' => 'int',
        'enrollmentid' => 'int',
        'totalregistrations' => 'int',
        'learningobjectid' => 'int',
        'name' => 'string',
        'secret' => 'string',
        'timecreated' => 'string',
        'ltitype' => 'string',
        'cartridgeurl' => 'string',
        'launchurl' => 'string',
        'registrationurl' => 'string',
        'customproperties' => 'string',
        'resourcetype' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'toolid' => null,
        'enrollmentid' => null,
        'totalregistrations' => null,
        'learningobjectid' => null,
        'name' => null,
        'secret' => null,
        'timecreated' => null,
        'ltitype' => null,
        'cartridgeurl' => null,
        'launchurl' => null,
        'registrationurl' => null,
        'customproperties' => null,
        'resourcetype' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'toolid' => false,
		'enrollmentid' => false,
		'totalregistrations' => false,
		'learningobjectid' => false,
		'name' => false,
		'secret' => false,
		'timecreated' => false,
		'ltitype' => false,
		'cartridgeurl' => false,
		'launchurl' => false,
		'registrationurl' => false,
		'customproperties' => false,
		'resourcetype' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'toolid' => 'toolid',
        'enrollmentid' => 'enrollmentid',
        'totalregistrations' => 'totalregistrations',
        'learningobjectid' => 'learningobjectid',
        'name' => 'name',
        'secret' => 'secret',
        'timecreated' => 'timecreated',
        'ltitype' => 'ltitype',
        'cartridgeurl' => 'cartridgeurl',
        'launchurl' => 'launchurl',
        'registrationurl' => 'registrationurl',
        'customproperties' => 'customproperties',
        'resourcetype' => 'resourcetype'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'toolid' => 'setToolid',
        'enrollmentid' => 'setEnrollmentid',
        'totalregistrations' => 'setTotalregistrations',
        'learningobjectid' => 'setLearningobjectid',
        'name' => 'setName',
        'secret' => 'setSecret',
        'timecreated' => 'setTimecreated',
        'ltitype' => 'setLtitype',
        'cartridgeurl' => 'setCartridgeurl',
        'launchurl' => 'setLaunchurl',
        'registrationurl' => 'setRegistrationurl',
        'customproperties' => 'setCustomproperties',
        'resourcetype' => 'setResourcetype'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'toolid' => 'getToolid',
        'enrollmentid' => 'getEnrollmentid',
        'totalregistrations' => 'getTotalregistrations',
        'learningobjectid' => 'getLearningobjectid',
        'name' => 'getName',
        'secret' => 'getSecret',
        'timecreated' => 'getTimecreated',
        'ltitype' => 'getLtitype',
        'cartridgeurl' => 'getCartridgeurl',
        'launchurl' => 'getLaunchurl',
        'registrationurl' => 'getRegistrationurl',
        'customproperties' => 'getCustomproperties',
        'resourcetype' => 'getResourcetype'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('toolid', $data ?? [], null);
        $this->setIfExists('enrollmentid', $data ?? [], null);
        $this->setIfExists('totalregistrations', $data ?? [], null);
        $this->setIfExists('learningobjectid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('ltitype', $data ?? [], null);
        $this->setIfExists('cartridgeurl', $data ?? [], null);
        $this->setIfExists('launchurl', $data ?? [], null);
        $this->setIfExists('registrationurl', $data ?? [], null);
        $this->setIfExists('customproperties', $data ?? [], null);
        $this->setIfExists('resourcetype', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets toolid
     *
     * @return int|null
     */
    public function getToolid()
    {
        return $this->container['toolid'];
    }

    /**
     * Sets toolid
     *
     * @param int|null $toolid Unique ID of the tool.
     *
     * @return self
     */
    public function setToolid($toolid)
    {
        if (is_null($toolid)) {
            throw new \InvalidArgumentException('non-nullable toolid cannot be null');
        }
        $this->container['toolid'] = $toolid;

        return $this;
    }

    /**
     * Gets enrollmentid
     *
     * @return int|null
     */
    public function getEnrollmentid()
    {
        return $this->container['enrollmentid'];
    }

    /**
     * Sets enrollmentid
     *
     * @param int|null $enrollmentid Unique ID of the enrollment.
     *
     * @return self
     */
    public function setEnrollmentid($enrollmentid)
    {
        if (is_null($enrollmentid)) {
            throw new \InvalidArgumentException('non-nullable enrollmentid cannot be null');
        }
        $this->container['enrollmentid'] = $enrollmentid;

        return $this;
    }

    /**
     * Gets totalregistrations
     *
     * @return int|null
     */
    public function getTotalregistrations()
    {
        return $this->container['totalregistrations'];
    }

    /**
     * Sets totalregistrations
     *
     * @param int|null $totalregistrations The total user registration counts.
     *
     * @return self
     */
    public function setTotalregistrations($totalregistrations)
    {
        if (is_null($totalregistrations)) {
            throw new \InvalidArgumentException('non-nullable totalregistrations cannot be null');
        }
        $this->container['totalregistrations'] = $totalregistrations;

        return $this;
    }

    /**
     * Gets learningobjectid
     *
     * @return int|null
     */
    public function getLearningobjectid()
    {
        return $this->container['learningobjectid'];
    }

    /**
     * Sets learningobjectid
     *
     * @param int|null $learningobjectid The ID of the learning object. This ID is only available if It's connected to single learning object.
     *
     * @return self
     */
    public function setLearningobjectid($learningobjectid)
    {
        if (is_null($learningobjectid)) {
            throw new \InvalidArgumentException('non-nullable learningobjectid cannot be null');
        }
        $this->container['learningobjectid'] = $learningobjectid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the tool.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret Secret key for the tool.
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return string|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param string|null $timecreated Timestamp of when the tool was      *                                                             created.
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets ltitype
     *
     * @return string|null
     */
    public function getLtitype()
    {
        return $this->container['ltitype'];
    }

    /**
     * Sets ltitype
     *
     * @param string|null $ltitype Type of LTI.
     *
     * @return self
     */
    public function setLtitype($ltitype)
    {
        if (is_null($ltitype)) {
            throw new \InvalidArgumentException('non-nullable ltitype cannot be null');
        }
        $this->container['ltitype'] = $ltitype;

        return $this;
    }

    /**
     * Gets cartridgeurl
     *
     * @return string|null
     */
    public function getCartridgeurl()
    {
        return $this->container['cartridgeurl'];
    }

    /**
     * Sets cartridgeurl
     *
     * @param string|null $cartridgeurl URL for cartridge.
     *
     * @return self
     */
    public function setCartridgeurl($cartridgeurl)
    {
        if (is_null($cartridgeurl)) {
            throw new \InvalidArgumentException('non-nullable cartridgeurl cannot be null');
        }
        $this->container['cartridgeurl'] = $cartridgeurl;

        return $this;
    }

    /**
     * Gets launchurl
     *
     * @return string|null
     */
    public function getLaunchurl()
    {
        return $this->container['launchurl'];
    }

    /**
     * Sets launchurl
     *
     * @param string|null $launchurl URL to launch the tool.
     *
     * @return self
     */
    public function setLaunchurl($launchurl)
    {
        if (is_null($launchurl)) {
            throw new \InvalidArgumentException('non-nullable launchurl cannot be null');
        }
        $this->container['launchurl'] = $launchurl;

        return $this;
    }

    /**
     * Gets registrationurl
     *
     * @return string|null
     */
    public function getRegistrationurl()
    {
        return $this->container['registrationurl'];
    }

    /**
     * Sets registrationurl
     *
     * @param string|null $registrationurl URL for registration.
     *
     * @return self
     */
    public function setRegistrationurl($registrationurl)
    {
        if (is_null($registrationurl)) {
            throw new \InvalidArgumentException('non-nullable registrationurl cannot be null');
        }
        $this->container['registrationurl'] = $registrationurl;

        return $this;
    }

    /**
     * Gets customproperties
     *
     * @return string|null
     */
    public function getCustomproperties()
    {
        return $this->container['customproperties'];
    }

    /**
     * Sets customproperties
     *
     * @param string|null $customproperties Custom properties for the      *                                                                  tool.
     *
     * @return self
     */
    public function setCustomproperties($customproperties)
    {
        if (is_null($customproperties)) {
            throw new \InvalidArgumentException('non-nullable customproperties cannot be null');
        }
        $this->container['customproperties'] = $customproperties;

        return $this;
    }

    /**
     * Gets resourcetype
     *
     * @return string|null
     */
    public function getResourcetype()
    {
        return $this->container['resourcetype'];
    }

    /**
     * Sets resourcetype
     *
     * @param string|null $resourcetype Type of the resource.
     *
     * @return self
     */
    public function setResourcetype($resourcetype)
    {
        if (is_null($resourcetype)) {
            throw new \InvalidArgumentException('non-nullable resourcetype cannot be null');
        }
        $this->container['resourcetype'] = $resourcetype;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


