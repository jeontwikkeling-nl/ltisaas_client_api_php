<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LtiSaas API
 *
 * API versions description:  *     - v0: For testing purposes only. It serves mock data that won't be written to the database and there is no validation.  *     - v1: The official version of the LtiSaas API.  *     Note: For testing v0, use the HTTP `Access-Token` header with the value 'dummy'
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation courseAdd
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function courseAdd($coursename)
    {
        list($response) = $this->courseAddWithHttpInfo($coursename);
        return $response;
    }

    /**
     * Operation courseAddWithHttpInfo
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseAddWithHttpInfo($coursename)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->courseAddRequest($coursename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseAddAsync
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseAddAsync($coursename)
    {
        return $this->courseAddAsyncWithHttpInfo($coursename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseAddAsyncWithHttpInfo
     *
     * Create a new course
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseAddAsyncWithHttpInfo($coursename)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->courseAddRequest($coursename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseAdd'
     *
     * @param  string $coursename The name of the course to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseAddRequest($coursename)
    {
        // verify the required parameter 'coursename' is set
        if ($coursename === null || (is_array($coursename) && count($coursename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coursename when calling courseAdd'
            );
        }

        $resourcePath = '/course/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($coursename !== null) {
            $queryParams['coursename'] = ObjectSerializer::toQueryValue($coursename, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseDelete
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function courseDelete($courseid)
    {
        list($response) = $this->courseDeleteWithHttpInfo($courseid);
        return $response;
    }

    /**
     * Operation courseDeleteWithHttpInfo
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseDeleteWithHttpInfo($courseid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->courseDeleteRequest($courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseDeleteAsync
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseDeleteAsync($courseid)
    {
        return $this->courseDeleteAsyncWithHttpInfo($courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseDeleteAsyncWithHttpInfo
     *
     * Delete an existing course by its ID
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseDeleteAsyncWithHttpInfo($courseid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->courseDeleteRequest($courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseDelete'
     *
     * @param  int $courseid The unique identifier of the course to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseDeleteRequest($courseid)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseDelete'
            );
        }

        $resourcePath = '/course/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningObjectDelete
     *
     * Delete a specific learning object
     *
     * @param  int $id The identifier of the learning object (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function courseLearningObjectDelete($id)
    {
        list($response) = $this->courseLearningObjectDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseLearningObjectDeleteWithHttpInfo
     *
     * Delete a specific learning object
     *
     * @param  int $id The identifier of the learning object (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningObjectDeleteWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->courseLearningObjectDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningObjectDeleteAsync
     *
     * Delete a specific learning object
     *
     * @param  int $id The identifier of the learning object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectDeleteAsync($id)
    {
        return $this->courseLearningObjectDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningObjectDeleteAsyncWithHttpInfo
     *
     * Delete a specific learning object
     *
     * @param  int $id The identifier of the learning object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->courseLearningObjectDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningObjectDelete'
     *
     * @param  int $id The identifier of the learning object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningObjectDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling courseLearningObjectDelete'
            );
        }

        $resourcePath = '/course/learningobject/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningObjectScromAdd
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function courseLearningObjectScromAdd($courseid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        list($response) = $this->courseLearningObjectScromAddWithHttpInfo($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);
        return $response;
    }

    /**
     * Operation courseLearningObjectScromAddWithHttpInfo
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningObjectScromAddWithHttpInfo($courseid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->courseLearningObjectScromAddRequest($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningObjectScromAddAsync
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectScromAddAsync($courseid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        return $this->courseLearningObjectScromAddAsyncWithHttpInfo($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningObjectScromAddAsyncWithHttpInfo
     *
     * Add an SCORM package to a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningObjectScromAddAsyncWithHttpInfo($courseid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->courseLearningObjectScromAddRequest($courseid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningObjectScromAdd'
     *
     * @param  int $courseid The unique identifier of the course (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningObjectScromAddRequest($courseid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseLearningObjectScromAdd'
            );
        }
        // verify the required parameter 'packagefile' is set
        if ($packagefile === null || (is_array($packagefile) && count($packagefile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packagefile when calling courseLearningObjectScromAdd'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling courseLearningObjectScromAdd'
            );
        }

        $resourcePath = '/course/learningobject/scrom/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }
        // query params
        if ($packagefile !== null) {
            $queryParams['packagefile'] = ObjectSerializer::toQueryValue($packagefile, 'binary');
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($popup !== null) {
            $queryParams['popup'] = ObjectSerializer::toQueryValue($popup, null);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width, null);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height, null);
        }
        // query params
        if ($grademethod !== null) {
            $queryParams['grademethod'] = ObjectSerializer::toQueryValue($grademethod, null);
        }
        // query params
        if ($maxgrade !== null) {
            $queryParams['maxgrade'] = ObjectSerializer::toQueryValue($maxgrade, null);
        }
        // query params
        if ($maxattempt !== null) {
            $queryParams['maxattempt'] = ObjectSerializer::toQueryValue($maxattempt, null);
        }
        // query params
        if ($whatgrade !== null) {
            $queryParams['whatgrade'] = ObjectSerializer::toQueryValue($whatgrade, null);
        }
        // query params
        if ($forcenewattempt !== null) {
            $queryParams['forcenewattempt'] = ObjectSerializer::toQueryValue($forcenewattempt, null);
        }
        // query params
        if ($lastattemptlock !== null) {
            $queryParams['lastattemptlock'] = ObjectSerializer::toQueryValue($lastattemptlock, null);
        }
        // query params
        if ($autocommit !== null) {
            $queryParams['autocommit'] = ObjectSerializer::toQueryValue($autocommit, null);
        }
        // query params
        if ($masteryoverride !== null) {
            $queryParams['masteryoverride'] = ObjectSerializer::toQueryValue($masteryoverride, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningobjectList
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function courseLearningobjectList($courseid)
    {
        list($response) = $this->courseLearningobjectListWithHttpInfo($courseid);
        return $response;
    }

    /**
     * Operation courseLearningobjectListWithHttpInfo
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningobjectListWithHttpInfo($courseid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->courseLearningobjectListRequest($courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningobjectListAsync
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectListAsync($courseid)
    {
        return $this->courseLearningobjectListAsyncWithHttpInfo($courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningobjectListAsyncWithHttpInfo
     *
     * Get learning objects for a course
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectListAsyncWithHttpInfo($courseid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->courseLearningobjectListRequest($courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningobjectList'
     *
     * @param  int $courseid The unique identifier of the course (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningobjectListRequest($courseid)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseLearningobjectList'
            );
        }

        $resourcePath = '/course/learningobject/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLearningobjectScormUpdate
     *
     * Update SCORM Learning Object
     *
     * @param  int $loid The ID of the learning object (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function courseLearningobjectScormUpdate($loid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        list($response) = $this->courseLearningobjectScormUpdateWithHttpInfo($loid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);
        return $response;
    }

    /**
     * Operation courseLearningobjectScormUpdateWithHttpInfo
     *
     * Update SCORM Learning Object
     *
     * @param  int $loid The ID of the learning object (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLearningobjectScormUpdateWithHttpInfo($loid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->courseLearningobjectScormUpdateRequest($loid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLearningobjectScormUpdateAsync
     *
     * Update SCORM Learning Object
     *
     * @param  int $loid The ID of the learning object (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectScormUpdateAsync($loid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        return $this->courseLearningobjectScormUpdateAsyncWithHttpInfo($loid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLearningobjectScormUpdateAsyncWithHttpInfo
     *
     * Update SCORM Learning Object
     *
     * @param  int $loid The ID of the learning object (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLearningobjectScormUpdateAsyncWithHttpInfo($loid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->courseLearningobjectScormUpdateRequest($loid, $packagefile, $name, $popup, $width, $height, $grademethod, $maxgrade, $maxattempt, $whatgrade, $forcenewattempt, $lastattemptlock, $autocommit, $masteryoverride);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLearningobjectScormUpdate'
     *
     * @param  int $loid The ID of the learning object (required)
     * @param  string $packagefile The .zip file of the SCORM package (required)
     * @param  string $name The name of the SCORM package (required)
     * @param  int $popup Indicates if the SCORM package should open in a new window (1) or not (0) (optional)
     * @param  int $width The display width for the SCORM package (optional)
     * @param  int $height The display height for the SCORM package (optional)
     * @param  int $grademethod The grading method for the SCORM package (0: learning objects, 1: highest grade, 2: average grade, 3:      *          sum grade) (optional)
     * @param  int $maxgrade The maximum grade possible for the SCORM package (optional)
     * @param  int $maxattempt The maximum number of attempts allowed for the SCORM package (optional)
     * @param  int $whatgrade The grading strategy for multiple attempts (0: highest attempt, 1: average grade, 2: first attempt) (optional)
     * @param  int $forcenewattempt Policy for forcing new attempts (0: no, 1: every new attempt is a new grade, 2: every new attempt      *          resets previous grades) (optional)
     * @param  int $lastattemptlock Indicates if the SCORM package should be locked after the last attempt (0: no, 1: yes) (optional)
     * @param  int $autocommit Indicates if the SCORM package grades should auto commit (0: no, 1: yes) (optional)
     * @param  int $masteryoverride Indicates if the mastery grade overrides the max grade (0: no, 1: yes) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLearningobjectScormUpdateRequest($loid, $packagefile, $name, $popup = null, $width = null, $height = null, $grademethod = null, $maxgrade = null, $maxattempt = null, $whatgrade = null, $forcenewattempt = null, $lastattemptlock = null, $autocommit = null, $masteryoverride = null)
    {
        // verify the required parameter 'loid' is set
        if ($loid === null || (is_array($loid) && count($loid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loid when calling courseLearningobjectScormUpdate'
            );
        }
        // verify the required parameter 'packagefile' is set
        if ($packagefile === null || (is_array($packagefile) && count($packagefile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packagefile when calling courseLearningobjectScormUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling courseLearningobjectScormUpdate'
            );
        }

        $resourcePath = '/course/learningobject/scrom/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loid !== null) {
            $queryParams['loid'] = ObjectSerializer::toQueryValue($loid, null);
        }
        // query params
        if ($packagefile !== null) {
            $queryParams['packagefile'] = ObjectSerializer::toQueryValue($packagefile, 'binary');
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($popup !== null) {
            $queryParams['popup'] = ObjectSerializer::toQueryValue($popup, null);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width, null);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height, null);
        }
        // query params
        if ($grademethod !== null) {
            $queryParams['grademethod'] = ObjectSerializer::toQueryValue($grademethod, null);
        }
        // query params
        if ($maxgrade !== null) {
            $queryParams['maxgrade'] = ObjectSerializer::toQueryValue($maxgrade, null);
        }
        // query params
        if ($maxattempt !== null) {
            $queryParams['maxattempt'] = ObjectSerializer::toQueryValue($maxattempt, null);
        }
        // query params
        if ($whatgrade !== null) {
            $queryParams['whatgrade'] = ObjectSerializer::toQueryValue($whatgrade, null);
        }
        // query params
        if ($forcenewattempt !== null) {
            $queryParams['forcenewattempt'] = ObjectSerializer::toQueryValue($forcenewattempt, null);
        }
        // query params
        if ($lastattemptlock !== null) {
            $queryParams['lastattemptlock'] = ObjectSerializer::toQueryValue($lastattemptlock, null);
        }
        // query params
        if ($autocommit !== null) {
            $queryParams['autocommit'] = ObjectSerializer::toQueryValue($autocommit, null);
        }
        // query params
        if ($masteryoverride !== null) {
            $queryParams['masteryoverride'] = ObjectSerializer::toQueryValue($masteryoverride, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseList
     *
     * Retrieve all courses
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function courseList()
    {
        list($response) = $this->courseListWithHttpInfo();
        return $response;
    }

    /**
     * Operation courseListWithHttpInfo
     *
     * Retrieve all courses
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseListWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->courseListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseListAsync
     *
     * Retrieve all courses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseListAsync()
    {
        return $this->courseListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseListAsyncWithHttpInfo
     *
     * Retrieve all courses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseListAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->courseListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseListRequest()
    {

        $resourcePath = '/course/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLtiRegistrationsByDay
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2006
     */
    public function courseLtiRegistrationsByDay($from, $till, $toolid = null)
    {
        list($response) = $this->courseLtiRegistrationsByDayWithHttpInfo($from, $till, $toolid);
        return $response;
    }

    /**
     * Operation courseLtiRegistrationsByDayWithHttpInfo
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLtiRegistrationsByDayWithHttpInfo($from, $till, $toolid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->courseLtiRegistrationsByDayRequest($from, $till, $toolid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLtiRegistrationsByDayAsync
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsByDayAsync($from, $till, $toolid = null)
    {
        return $this->courseLtiRegistrationsByDayAsyncWithHttpInfo($from, $till, $toolid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLtiRegistrationsByDayAsyncWithHttpInfo
     *
     * Get LTI registrations by day
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsByDayAsyncWithHttpInfo($from, $till, $toolid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->courseLtiRegistrationsByDayRequest($from, $till, $toolid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLtiRegistrationsByDay'
     *
     * @param  \DateTime $from The start date (format: DD-MM-YYYY) (required)
     * @param  \DateTime $till The end date (format: DD-MM-YYYY) (required)
     * @param  int $toolid The identifier of the LTI tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLtiRegistrationsByDayRequest($from, $till, $toolid = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling courseLtiRegistrationsByDay'
            );
        }
        // verify the required parameter 'till' is set
        if ($till === null || (is_array($till) && count($till) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $till when calling courseLtiRegistrationsByDay'
            );
        }

        $resourcePath = '/course/lti/registrations_by_day';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, 'date');
        }
        // query params
        if ($till !== null) {
            $queryParams['till'] = ObjectSerializer::toQueryValue($till, 'date');
        }
        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseLtiRegistrationsSumByCourse
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: YYYY-MM-DD) (required)
     * @param  \DateTime $till The end date (format: YYYY-MM-DD) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function courseLtiRegistrationsSumByCourse($from, $till, $courseid = null)
    {
        list($response) = $this->courseLtiRegistrationsSumByCourseWithHttpInfo($from, $till, $courseid);
        return $response;
    }

    /**
     * Operation courseLtiRegistrationsSumByCourseWithHttpInfo
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: YYYY-MM-DD) (required)
     * @param  \DateTime $till The end date (format: YYYY-MM-DD) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseLtiRegistrationsSumByCourseWithHttpInfo($from, $till, $courseid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->courseLtiRegistrationsSumByCourseRequest($from, $till, $courseid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseLtiRegistrationsSumByCourseAsync
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: YYYY-MM-DD) (required)
     * @param  \DateTime $till The end date (format: YYYY-MM-DD) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsSumByCourseAsync($from, $till, $courseid = null)
    {
        return $this->courseLtiRegistrationsSumByCourseAsyncWithHttpInfo($from, $till, $courseid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseLtiRegistrationsSumByCourseAsyncWithHttpInfo
     *
     * Get total LTI registrations per course
     *
     * @param  \DateTime $from The start date (format: YYYY-MM-DD) (required)
     * @param  \DateTime $till The end date (format: YYYY-MM-DD) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseLtiRegistrationsSumByCourseAsyncWithHttpInfo($from, $till, $courseid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->courseLtiRegistrationsSumByCourseRequest($from, $till, $courseid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseLtiRegistrationsSumByCourse'
     *
     * @param  \DateTime $from The start date (format: YYYY-MM-DD) (required)
     * @param  \DateTime $till The end date (format: YYYY-MM-DD) (required)
     * @param  int $courseid The identifier of the course (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseLtiRegistrationsSumByCourseRequest($from, $till, $courseid = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling courseLtiRegistrationsSumByCourse'
            );
        }
        // verify the required parameter 'till' is set
        if ($till === null || (is_array($till) && count($till) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $till when calling courseLtiRegistrationsSumByCourse'
            );
        }

        $resourcePath = '/course/lti/registrations_sum_by_course';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, 'date');
        }
        // query params
        if ($till !== null) {
            $queryParams['till'] = ObjectSerializer::toQueryValue($till, 'date');
        }
        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolAdd
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function courseToolAdd($courseid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        list($response) = $this->courseToolAddWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);
        return $response;
    }

    /**
     * Operation courseToolAddWithHttpInfo
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolAddWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->courseToolAddRequest($courseid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolAddAsync
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolAddAsync($courseid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        return $this->courseToolAddAsyncWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolAddAsyncWithHttpInfo
     *
     * Add new tool to a course
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolAddAsyncWithHttpInfo($courseid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->courseToolAddRequest($courseid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolAdd'
     *
     * @param  int $courseid The ID of the course (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolAddRequest($courseid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        // verify the required parameter 'courseid' is set
        if ($courseid === null || (is_array($courseid) && count($courseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $courseid when calling courseToolAdd'
            );
        }
        // verify the required parameter 'ltiversion' is set
        if ($ltiversion === null || (is_array($ltiversion) && count($ltiversion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ltiversion when calling courseToolAdd'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling courseToolAdd'
            );
        }
        // verify the required parameter 'publishmode' is set
        if ($publishmode === null || (is_array($publishmode) && count($publishmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publishmode when calling courseToolAdd'
            );
        }

        $resourcePath = '/course/tool/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($courseid !== null) {
            $queryParams['courseid'] = ObjectSerializer::toQueryValue($courseid, null);
        }
        // query params
        if ($ltiversion !== null) {
            $queryParams['ltiversion'] = ObjectSerializer::toQueryValue($ltiversion, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($publishmode !== null) {
            $queryParams['publishmode'] = ObjectSerializer::toQueryValue($publishmode, null);
        }
        // query params
        if ($objectid !== null) {
            $queryParams['objectid'] = ObjectSerializer::toQueryValue($objectid, null);
        }
        // query params
        if ($maxenrolled !== null) {
            $queryParams['maxenrolled'] = ObjectSerializer::toQueryValue($maxenrolled, null);
        }
        // query params
        if ($roleinstructor !== null) {
            $queryParams['roleinstructor'] = ObjectSerializer::toQueryValue($roleinstructor, null);
        }
        // query params
        if ($rolelearner !== null) {
            $queryParams['rolelearner'] = ObjectSerializer::toQueryValue($rolelearner, null);
        }
        // query params
        if ($provisioningmodeinstructor !== null) {
            $queryParams['provisioningmodeinstructor'] = ObjectSerializer::toQueryValue($provisioningmodeinstructor, null);
        }
        // query params
        if ($provisioningmodelearner !== null) {
            $queryParams['provisioningmodelearner'] = ObjectSerializer::toQueryValue($provisioningmodelearner, null);
        }
        // query params
        if ($gradesync !== null) {
            $queryParams['gradesync'] = ObjectSerializer::toQueryValue($gradesync, null);
        }
        // query params
        if ($gradesynccompletion !== null) {
            $queryParams['gradesynccompletion'] = ObjectSerializer::toQueryValue($gradesynccompletion, null);
        }
        // query params
        if ($membersync !== null) {
            $queryParams['membersync'] = ObjectSerializer::toQueryValue($membersync, null);
        }
        // query params
        if ($membersyncmode !== null) {
            $queryParams['membersyncmode'] = ObjectSerializer::toQueryValue($membersyncmode, null);
        }
        // query params
        if ($enrolperiod !== null) {
            $queryParams['enrolperiod'] = ObjectSerializer::toQueryValue($enrolperiod, null);
        }
        // query params
        if ($enrolstartdate !== null) {
            $queryParams['enrolstartdate'] = ObjectSerializer::toQueryValue($enrolstartdate, 'date-time');
        }
        // query params
        if ($enrolenddate !== null) {
            $queryParams['enrolenddate'] = ObjectSerializer::toQueryValue($enrolenddate, 'date-time');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolDelete
     *
     * Delete a specific course tool
     *
     * @param  int $id The identifier of the lti tool (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function courseToolDelete($id)
    {
        list($response) = $this->courseToolDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseToolDeleteWithHttpInfo
     *
     * Delete a specific course tool
     *
     * @param  int $id The identifier of the lti tool (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolDeleteWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->courseToolDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolDeleteAsync
     *
     * Delete a specific course tool
     *
     * @param  int $id The identifier of the lti tool (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolDeleteAsync($id)
    {
        return $this->courseToolDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolDeleteAsyncWithHttpInfo
     *
     * Delete a specific course tool
     *
     * @param  int $id The identifier of the lti tool (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->courseToolDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolDelete'
     *
     * @param  int $id The identifier of the lti tool (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling courseToolDelete'
            );
        }

        $resourcePath = '/course/tool/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation courseToolUpdate
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function courseToolUpdate($toolid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        list($response) = $this->courseToolUpdateWithHttpInfo($toolid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);
        return $response;
    }

    /**
     * Operation courseToolUpdateWithHttpInfo
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseToolUpdateWithHttpInfo($toolid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->courseToolUpdateRequest($toolid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation courseToolUpdateAsync
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolUpdateAsync($toolid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        return $this->courseToolUpdateAsyncWithHttpInfo($toolid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation courseToolUpdateAsyncWithHttpInfo
     *
     * Update a specific course tool
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function courseToolUpdateAsyncWithHttpInfo($toolid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->courseToolUpdateRequest($toolid, $ltiversion, $name, $publishmode, $objectid, $maxenrolled, $roleinstructor, $rolelearner, $provisioningmodeinstructor, $provisioningmodelearner, $gradesync, $gradesynccompletion, $membersync, $membersyncmode, $enrolperiod, $enrolstartdate, $enrolenddate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'courseToolUpdate'
     *
     * @param  int $toolid The ID of the lti tool (required)
     * @param  string $ltiversion The version of LTI (required)
     * @param  string $name The name (required)
     * @param  string $publishmode The mode of publishing (required)
     * @param  int $objectid The ID of the object (optional)
     * @param  int $maxenrolled The maximum enrollment (optional)
     * @param  int $roleinstructor The role of the instructor (optional)
     * @param  int $rolelearner The role of the learner (optional)
     * @param  int $provisioningmodeinstructor The provisioning mode of the instructor (optional)
     * @param  int $provisioningmodelearner The provisioning mode of the learner (optional)
     * @param  int $gradesync Whether grade sync is enabled (optional)
     * @param  int $gradesynccompletion Whether grade sync completion is enabled (optional)
     * @param  int $membersync Whether member sync is enabled (optional)
     * @param  int $membersyncmode The mode of member sync (optional)
     * @param  int $enrolperiod The enrollment period in seconds (optional)
     * @param  \DateTime $enrolstartdate The start date of the enrollment (optional)
     * @param  \DateTime $enrolenddate The end date of the enrollment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function courseToolUpdateRequest($toolid, $ltiversion, $name, $publishmode, $objectid = null, $maxenrolled = null, $roleinstructor = null, $rolelearner = null, $provisioningmodeinstructor = null, $provisioningmodelearner = null, $gradesync = null, $gradesynccompletion = null, $membersync = null, $membersyncmode = null, $enrolperiod = null, $enrolstartdate = null, $enrolenddate = null)
    {
        // verify the required parameter 'toolid' is set
        if ($toolid === null || (is_array($toolid) && count($toolid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $toolid when calling courseToolUpdate'
            );
        }
        // verify the required parameter 'ltiversion' is set
        if ($ltiversion === null || (is_array($ltiversion) && count($ltiversion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ltiversion when calling courseToolUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling courseToolUpdate'
            );
        }
        // verify the required parameter 'publishmode' is set
        if ($publishmode === null || (is_array($publishmode) && count($publishmode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publishmode when calling courseToolUpdate'
            );
        }

        $resourcePath = '/course/tool/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }
        // query params
        if ($ltiversion !== null) {
            $queryParams['ltiversion'] = ObjectSerializer::toQueryValue($ltiversion, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($publishmode !== null) {
            $queryParams['publishmode'] = ObjectSerializer::toQueryValue($publishmode, null);
        }
        // query params
        if ($objectid !== null) {
            $queryParams['objectid'] = ObjectSerializer::toQueryValue($objectid, null);
        }
        // query params
        if ($maxenrolled !== null) {
            $queryParams['maxenrolled'] = ObjectSerializer::toQueryValue($maxenrolled, null);
        }
        // query params
        if ($roleinstructor !== null) {
            $queryParams['roleinstructor'] = ObjectSerializer::toQueryValue($roleinstructor, null);
        }
        // query params
        if ($rolelearner !== null) {
            $queryParams['rolelearner'] = ObjectSerializer::toQueryValue($rolelearner, null);
        }
        // query params
        if ($provisioningmodeinstructor !== null) {
            $queryParams['provisioningmodeinstructor'] = ObjectSerializer::toQueryValue($provisioningmodeinstructor, null);
        }
        // query params
        if ($provisioningmodelearner !== null) {
            $queryParams['provisioningmodelearner'] = ObjectSerializer::toQueryValue($provisioningmodelearner, null);
        }
        // query params
        if ($gradesync !== null) {
            $queryParams['gradesync'] = ObjectSerializer::toQueryValue($gradesync, null);
        }
        // query params
        if ($gradesynccompletion !== null) {
            $queryParams['gradesynccompletion'] = ObjectSerializer::toQueryValue($gradesynccompletion, null);
        }
        // query params
        if ($membersync !== null) {
            $queryParams['membersync'] = ObjectSerializer::toQueryValue($membersync, null);
        }
        // query params
        if ($membersyncmode !== null) {
            $queryParams['membersyncmode'] = ObjectSerializer::toQueryValue($membersyncmode, null);
        }
        // query params
        if ($enrolperiod !== null) {
            $queryParams['enrolperiod'] = ObjectSerializer::toQueryValue($enrolperiod, null);
        }
        // query params
        if ($enrolstartdate !== null) {
            $queryParams['enrolstartdate'] = ObjectSerializer::toQueryValue($enrolstartdate, 'date-time');
        }
        // query params
        if ($enrolenddate !== null) {
            $queryParams['enrolenddate'] = ObjectSerializer::toQueryValue($enrolenddate, 'date-time');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenAdd
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20011
     */
    public function tokenAdd($name)
    {
        list($response) = $this->tokenAddWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation tokenAddWithHttpInfo
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenAddWithHttpInfo($name)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->tokenAddRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenAddAsync
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenAddAsync($name)
    {
        return $this->tokenAddAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenAddAsyncWithHttpInfo
     *
     * Add a new API token
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenAddAsyncWithHttpInfo($name)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->tokenAddRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenAdd'
     *
     * @param  string $name The name of the token for your own administration purposes (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenAddRequest($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling tokenAdd'
            );
        }

        $resourcePath = '/token/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenDelete
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function tokenDelete($token)
    {
        list($response) = $this->tokenDeleteWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation tokenDeleteWithHttpInfo
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenDeleteWithHttpInfo($token)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->tokenDeleteRequest($token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenDeleteAsync
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenDeleteAsync($token)
    {
        return $this->tokenDeleteAsyncWithHttpInfo($token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenDeleteAsyncWithHttpInfo
     *
     * Delete an API token
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenDeleteAsyncWithHttpInfo($token)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->tokenDeleteRequest($token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenDelete'
     *
     * @param  string $token The tokenkey you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenDeleteRequest($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling tokenDelete'
            );
        }

        $resourcePath = '/token/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenList
     *
     * Get list of API tokens
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20010
     */
    public function tokenList()
    {
        list($response) = $this->tokenListWithHttpInfo();
        return $response;
    }

    /**
     * Operation tokenListWithHttpInfo
     *
     * Get list of API tokens
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenListWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->tokenListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenListAsync
     *
     * Get list of API tokens
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenListAsync()
    {
        return $this->tokenListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenListAsyncWithHttpInfo
     *
     * Get list of API tokens
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenListAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->tokenListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tokenListRequest()
    {

        $resourcePath = '/token/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDelete
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function userDelete($id)
    {
        list($response) = $this->userDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userDeleteWithHttpInfo
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeleteWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->userDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDeleteAsync
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteAsync($id)
    {
        return $this->userDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeleteAsyncWithHttpInfo
     *
     * Delete a user by ID
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->userDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDelete'
     *
     * @param  int $id The identifier of the user (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userDelete'
            );
        }

        $resourcePath = '/user/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDeleteBulk
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function userDeleteBulk($ids)
    {
        list($response) = $this->userDeleteBulkWithHttpInfo($ids);
        return $response;
    }

    /**
     * Operation userDeleteBulkWithHttpInfo
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeleteBulkWithHttpInfo($ids)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->userDeleteBulkRequest($ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDeleteBulkAsync
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteBulkAsync($ids)
    {
        return $this->userDeleteBulkAsyncWithHttpInfo($ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeleteBulkAsyncWithHttpInfo
     *
     * Delete multiple users by IDs
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteBulkAsyncWithHttpInfo($ids)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->userDeleteBulkRequest($ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDeleteBulk'
     *
     * @param  int[] $ids Comma-separated list of identifiers of the users to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDeleteBulkRequest($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling userDeleteBulk'
            );
        }

        $resourcePath = '/user/delete_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'csv', true);
        }
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userList
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2009
     */
    public function userList($toolid = null)
    {
        list($response) = $this->userListWithHttpInfo($toolid);
        return $response;
    }

    /**
     * Operation userListWithHttpInfo
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function userListWithHttpInfo($toolid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2009';
        $request = $this->userListRequest($toolid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userListAsync
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userListAsync($toolid = null)
    {
        return $this->userListAsyncWithHttpInfo($toolid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userListAsyncWithHttpInfo
     *
     * Get list of users in a tool
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userListAsyncWithHttpInfo($toolid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2009';
        $request = $this->userListRequest($toolid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userList'
     *
     * @param  int $toolid The identifier of the tool (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userListRequest($toolid = null)
    {

        $resourcePath = '/user/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($toolid !== null) {
            $queryParams['toolid'] = ObjectSerializer::toQueryValue($toolid, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Token');
        if ($apiKey !== null) {
            $headers['Access-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
